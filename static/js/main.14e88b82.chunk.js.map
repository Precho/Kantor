{"version":3,"sources":["componets/main.js","App.js","serviceWorker.js","index.js"],"names":["Main","useState","wartosc","setWartosc","dodatki","setDodatki","selectedValue","setSelectedValue","wartoscInput","setWartoscInput","useEffect","Dane","className","onSubmit","evt","preventDefault","alert","console","log","type","onChange","target","value","map","waluta","key","id","cena","selected","toFixed","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kcAiEeA,MA9Df,WAAiB,IAAD,EAGeC,mBAAS,GAHxB,mBAGLC,EAHK,KAGGC,EAHH,OAIeF,mBAAS,IAJxB,mBAILG,EAJK,KAIGC,EAJH,OAK2BJ,mBAAS,MALpC,mBAKLK,EALK,KAKSC,EALT,OAM2BN,mBAAS,GANpC,mBAMLO,EANK,KAMQC,EANR,KAyCd,OAlCFC,qBAAU,WACNL,EAAWM,KAEb,IAgCE,yBAAKC,UAAU,QACf,0BAAMA,UAAU,WAAWC,SAfZ,SAACC,GAEZA,EAAIC,iBACgB,GAAhBP,GACAQ,MAAM,wCACFC,QAAQC,IAAI,qBAEhBf,EAAWK,EAAaF,GACxBW,QAAQC,IAAIhB,GACZe,QAAQC,IAAIV,MAQhB,2BAAOW,KAAK,OAAQC,SArBJ,SAACN,GAEjBL,EAAgBK,EAAIO,OAAOC,UAoB3B,4BAAQF,SAlCE,SAACN,GACfG,QAAQC,IAAIJ,EAAIO,OAAOC,OACvBf,EAAiBO,EAAIO,OAAOC,SAkChBlB,EAAQmB,KAAI,SAAAC,GACZ,OACA,4BAAQC,IAAKD,EAAOE,GAAIJ,MAAOE,EAAOG,KAAQC,SAA8B,IAApBJ,EAAOI,SAAiB,WAAa,MAAQJ,EAAOA,YAIpH,2BAAOL,KAAK,SAASG,MAAM,YAE/B,4BAAKpB,EAAQ2B,QAAQ,IACrB,4CAAkBvB,EAAcuB,QAAQ,MC9C7BC,MAXf,WACE,OACE,yBAAKlB,UAAU,OACb,4BAAQA,UAAU,cACjB,uCAED,kBAAC,EAAD,QCGcmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.14e88b82.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport Dane from '../dane.json';\n\nfunction Main() {\n\n    \n    const [wartosc,setWartosc]=useState(0)\n    const [dodatki,setDodatki]=useState([]);\n    const [selectedValue,setSelectedValue]=useState(3.82); /// Set dolar price\n    const [wartoscInput,setWartoscInput] = useState(0);\nuseEffect(()=> {\n    setDodatki(Dane);\n    \n},[])\n\n   const zmiana = (evt)=> {\n    console.log(evt.target.value);\n    setSelectedValue(evt.target.value);\n   // console.log(selectedValue.cena)\n    //setSelectedValue(evt.target.value);\n   //setSelectedValue(waluta.cena);\n    // console.log(selectedValue.cena);\n    //setWartoscInput(evt.target.value);\n   // console.log(selectedValue.cena);\n    //var wartosc_input(evt.target.value);\n    }\n\n    const zmianaInput = (evt)=> {\n       // console.log(evt.target.value);\n        setWartoscInput(evt.target.value);\n    }\n    const oblicz = (evt) => {\n\n        evt.preventDefault();\n        if (wartoscInput == 0) {\n            alert(\"Uzupe≈Çnij CENE! / Insert PRICE!\")\n                console.log(\"Set input price\")\n        } else {\n            setWartosc(wartoscInput*selectedValue);\n            console.log(wartosc);\n            console.log(wartoscInput);\n        }\n        \n    }\n  return (\n    <div className=\"main\">\n    <form className=\"moj_form\" onSubmit={oblicz}>\n   \n        <input type=\"text\"  onChange={zmianaInput}/>\n        <select onChange={zmiana}  >\n            {\n                dodatki.map(waluta => {\n                return (\n                <option key={waluta.id} value={waluta.cena}   selected={waluta.selected === 1 ? \"selected\" : null} >{waluta.waluta}</option>\n                )})\n            } \n        </select>\n        <input type=\"submit\" value=\"Oblicz\"/>\n    </form>\n    <h3>{wartosc.toFixed(2)}</h3>\n    <h2>Kurs wynosi: {selectedValue.toFixed(2)}</h2>\n    </div>\n  );\n}\n\nexport default Main;\n","import React from 'react';\nimport './App.css';\nimport Main from './componets/main'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n       <h1>Kantor</h1>\n      </header>\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}